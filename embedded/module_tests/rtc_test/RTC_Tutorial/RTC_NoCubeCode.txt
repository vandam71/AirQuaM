#include "stm32f4xx_hal.h"

void SystemClock_Config(void);
void LED_Config(void);
void RTC_Config(void);

RTC_HandleTypeDef myRtcHandle;
RTC_AlarmTypeDef myAlarm;

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

int main(void)
{
	//HAL Initialisation
	HAL_Init();
	
	SystemClock_Config();
	
	LED_Config();
	
	RTC_Config();
	
	//Set time, data and alarm
	//1) Set time 
	sTime.Hours = 23;
	sTime.Minutes = 59;
	sTime.Seconds = 45;
	HAL_RTC_SetTime(&myRtcHandle, &sTime, RTC_FORMAT_BIN);
	//2) Set date 
	sDate.Date = 31;
	sDate.Month = RTC_MONTH_DECEMBER;
	sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
	sDate.Year = 17;
	HAL_RTC_SetDate(&myRtcHandle, &sDate, RTC_FORMAT_BIN);
	
	
	
	while(1)
	{
		HAL_RTC_GetTime(&myRtcHandle, &sTime, RTC_FORMAT_BIN);
		HAL_RTC_GetDate(&myRtcHandle, &sDate, RTC_FORMAT_BIN);
		HAL_Delay(400);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
	}
}

void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);


    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);


  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void LED_Config(void)
{
	//Enable Port D clock
	__HAL_RCC_GPIOD_CLK_ENABLE();
	//GPIO OUTPUT init
	GPIO_InitTypeDef ledInit;
	ledInit.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	ledInit.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOD, &ledInit);
}

void RTC_Config(void)
{
	//Enable RTC clock
	__HAL_RCC_RTC_ENABLE();
	//RTC Configurations
	myRtcHandle.Instance = RTC;
	myRtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
	myRtcHandle.Init.AsynchPrediv = 127;
	myRtcHandle.Init.SynchPrediv = 255;
	myRtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
	HAL_RTC_Init(&myRtcHandle);
	//Alarm Configurations
	myAlarm.Alarm = RTC_ALARM_A;
	myAlarm.AlarmTime.Hours = 0;
	myAlarm.AlarmTime.Minutes = 0;
	myAlarm.AlarmTime.Seconds = 10;
	myAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
	myAlarm.AlarmDateWeekDay = 1;
	HAL_RTC_SetAlarm_IT(&myRtcHandle, &myAlarm, RTC_FORMAT_BIN);
	
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
	
}


void RTC_Alarm_IRQHandler(void)
{
  HAL_RTC_AlarmIRQHandler(&myRtcHandle);
}

void SysTick_Handler(void)
{
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
}


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
}